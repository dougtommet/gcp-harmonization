---
title: "GCP Harmonization Tables & Figures"
author: "Doug Tommet"
date: '`r Sys.Date()`'
format:
  html:
    toc: true
    self-contained: true
    theme: journal
figures:
  fig-cap-location: top 
execute:
  echo: false
  warning: false
  message: false
keep-md: true
---

```{r}
rm(list = setdiff(ls(), lsf.str())[!(setdiff(ls(), lsf.str()) %in% "params")])
source(here::here("R", "001-Libraries_and_functions.R"))
source(here::here("R", "005-folder_paths_and_options.R"))
```

::: callout-note
-   We adapted an in-person cognitive assessment battery for administration by two alternative modes: telephone and videoconference, in an on-going observational study of cognitive aging and delirium

-   We administered all three modes (in-person, telephone, videoconference) in an on-going observational study of older surgical patients.

-   We co-calibrated the scores across mode using item response theory (we placed the scores on the same metric)

-   We compare the measurement precision (reliability) by mode:

-   We contrast the external predictive (and postdictive) validity by mode (association with age, education, and mean change after surgery).
:::

# Differences in GCP from the previous version

There were several different ways we considered harmonizing the test batteries to account for some mistakes and questionable assumptions.

The mistake was when we categorized the test scores into bins, the top two categories were combined into the same bin.

-   Tests this issue affected: VSAT, HVLT total, HVLT delayed and Digit symbol substitution

The questionable assumptions were deciding whether measures of letter fluency and semantic fluency were equivalent. For letter fluency there were three options we considered and for semantic fluency there were two options we considered.

-   Letter fluency:

    -   FAS and FCL summed and deemed equivalent

    -   FAS and FCL as individual tests, F are deemed equivalent, the other letters are not deemed equivalent

    -   FAS and FCL summed but **not** deemed equivalent

-   Semantic fluency:

    -   Animal naming and supermarket item naming are deemed equivalent

    -   Animal naming and supermarket item naming are **not** deemed equivalent

With these as the possible choices, we decided to go with the version that fixes the coding mistakes, FAS/FCL summed but not equivalent and animal/supermarket naming not equivalent.

```{r}
sagesII_subject_df <- readRDS(file=path(r_objects_folder, "010_sagesII_subject_df.rds"))
sagesII_validation_df <- readRDS(file=path(r_objects_folder, "010_sagesII_validation_df.rds"))
sagesII_subject_df_bl <- readRDS(file=path(r_objects_folder, "010_sagesII_subject_df_bl.rds"))

# Reading in the medical record datafile because there was some missing data in the CCI variable in the frozen datafile above
# Need to be connected to the brown network
sagesII_medical_record <- read_dta(file=path(netpath, "STUDIES", "DATA_MANAGEMENT", "SAGES-II", "DATA", "SOURCE", "CLEAN", "Preprocessing", "SAGESII-Medical-Review-Data-Analysis-File.dta")) %>%
  select(studyid, starts_with("vdcci"))

sagesII_subject_df_bl <- sagesII_subject_df_bl %>%
  select(-vdcci) %>%
  left_join(sagesII_medical_record, by = "studyid")

sagesII_subject_df <- sagesII_subject_df %>%
  select(-vdcci) %>%
  left_join(sagesII_medical_record, by = "studyid")


```

# Figure: Timeline of SAGES-II

## @fig-timeline: Timeline of SAGES-II participant interviews

```{r}
#| label: fig-timeline
#| fig-cap: Timeline of SAGES-II and the development/roll-out of novel assessment modes
#| fig-cap-location: top

covid2020_link <- RCurl::getURL("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-2020.csv")
covid2021_link <- RCurl::getURL("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-2021.csv")
covid2022_link <- RCurl::getURL("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-2022.csv")
covid2020 <- read_csv(covid2020_link)
covid2021 <- read_csv(covid2021_link)
covid2022 <- read_csv(covid2022_link)

covid <- covid2020 %>%
  bind_rows(covid2021) %>%
  bind_rows(covid2022) %>%
  group_by(state, county) %>%
  mutate(incident_cases = cases - lag(cases),
         incident_cases = case_when(incident_cases<0 ~ 0,
                                    TRUE ~ incident_cases),
         wk = lubridate::week(date),
         yr = lubridate::year(date))

latest_sages_interview <- sagesII_subject_df %>%
  summarize(max(vin_date))

covid <- covid %>% 
  filter(date <= latest_sages_interview)

covid_suffolk <- covid %>%
  filter(state=="Massachusetts") %>%
  filter(county %in% c("Suffolk")) %>%
  ungroup() %>%
  group_by(yr, wk) %>%
  summarize(date = min(date),
            incident_cases = sum(incident_cases, na.rm = TRUE)) %>%
  mutate(incident_cases10000 = incident_cases/10000)

foo <- sagesII_subject_df %>%
  mutate(timefr = factor(timefr)) %>%
  select(studyid, timefr, starts_with("vin_loc"), starts_with("vin_date"), starts_with("visit_number")) %>%
  filter(!is.na(timefr))

ggplot(foo, aes(x=vin_date, y = vin_loc2, color = timefr)) +
  geom_vline(xintercept = c(as.Date("2020-03-11"), as.Date("2021-05-24")), 
             color = "grey60", linetype=2) +
  geom_point(position = "jitter", alpha = 1, size = .5) +
  
  scale_x_date("Date", date_breaks = "6 months") +
  scale_color_manual("Interview Month", 
                     values = c("#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", 
                                "#4eb3d3", "#2b8cbe", "#0868ac", "#084081") ) +
  scale_y_continuous("Interview type", 
                     breaks = 1:3,
                     labels = c("In-person", "Telephone", "Video"),
                     sec.axis = sec_axis( trans=~.*10000, name="Weekly incident COVID cases (Suffolk County)")) +
  hrbrthemes::theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, hjust=1)) +
  geom_bar(data = covid_suffolk, inherit.aes = FALSE, 
           aes(x = date, y = incident_cases10000), 
           stat = "identity", fill = "red") +
  labs(caption = "COVID data source: NY Times COVID 19 data repository")
ggsave(here::here("Figures", "Figure 1.pdf"), device = cairo_pdf)
```

@fig-timeline shows when different interview modes occurred in SAGES II.

::: callout-note
*   Need the exact dates to use for the two vertical lines. Currently, they are based on the data.
*   Does the COVID data provide useful data? What is the best way to present it? Currently, it only uses Suffolk County data, but it could be expanded to additional counties in the Boston region.
*   Is the color scheme good?
:::

## @fig-timeline-alt1: Timeline of SAGES-II participant interviews

```{r}
#| label: fig-timeline-alt1
#| fig-cap: Timeline of SAGES-II and the development/roll-out of novel assessment modes
#| fig-cap-location: top
foo <- foo %>%
  mutate(j = runif(n(), -.5, .5),
         vin_loc_jitter = vin_loc2 + j) 
ggplot(foo, aes(x=vin_date, y = vin_loc_jitter, color = timefr)) +
  geom_vline(xintercept = c(as.Date("2020-03-11"), as.Date("2021-05-24")), 
             color = "grey60", linetype=2) +
  geom_point(alpha = 1, size = .5) +
  # geom_point(data = foo %>% filter(timefr==0), color="red", size = .5) +
  
  scale_x_date("Date", date_breaks = "6 months") +
  scale_color_manual("Interview Month", 
                     values = c("#084081",
                                "#0868ac",
                                "#2b8cbe",
                                "#4eb3d3",
                                "#7bccc4",
                                "#a8ddb5",
                                "#ccebc5",
                                "#e0f3db"
                                ) ) +
  scale_y_continuous("Interview type", 
                     breaks = 1:3,
                     labels = c("In-person \n (n = 1220)", "Telephone \n (n = 426)", "Video \n (n = 362)"),
                     sec.axis = sec_axis( trans=~.*10000, name="Weekly incident COVID cases (Suffolk County)")) +
  hrbrthemes::theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, hjust=1)) +
  geom_bar(data = covid_suffolk, inherit.aes = FALSE, 
           aes(x = date, y = incident_cases10000), 
           stat = "identity", fill = "red") +
  labs(caption = "COVID data source: NY Times COVID 19 data repository")
ggsave(here::here("Figures", "Figure 1-alt.pdf"), device = cairo_pdf)
```

@fig-timeline-alt1 is the same as @fig-timeline but with the color gradient reversed.

## Data quality check

Some of the points in @fig-timeline/@fig-timeline-alt1 appear to have data errors because they are listed as having in-person visits during the shutdown.  The following tables list the studyid and visit date for these participants.  @tbl-data-quality lists the nine records that are listed as being an in-person interview that occurred during the shutdown.  @tbl-data-quality1 - @tbl-data-quality9 lists the all the visit dates for each of the nine participants listed in @tbl-data-quality.

For most of these records it seems like the visit location is incorrect. One of the records seems like the visit date is incorrect.

Update: For the 8 records that are listed as having an in-person visit during the shutdown period, those were the partial in-person visits, so they are correct.

::: {.callout-note collapse=true icon=false}
## Tables of records to check 

```{r}
foo_odd_dates <- foo %>%
  filter(vin_loc2==1) %>%
  filter(vin_date > "2020-10-01" & vin_date < "2021-4-01") %>%
  select(studyid, timefr, vin_date, vin_loc) 

foo_odd_dates_ids <- foo_odd_dates %>%
  pull(studyid)
```

```{r}
#| label: tbl-data-quality
#| tbl-cap: Data quality check
#| tbl-cap-location: top

foo_odd_dates %>%
  gt::gt()
```

```{r}
#| label: tbl-data-quality1
#| tbl-cap: Studyid 1
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[1]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 1)
  )
```

```{r}
#| label: tbl-data-quality2
#| tbl-cap: Studyid 2
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[2]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 3)
  )
```

```{r}
#| label: tbl-data-quality3
#| tbl-cap: Studyid 3
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[3]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 2)
  )
```

```{r}
#| label: tbl-data-quality4
#| tbl-cap: Studyid 4
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[4]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 5)
  )
```

```{r}
#| label: tbl-data-quality5
#| tbl-cap: Studyid 5
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[5]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 1)
  )
```

```{r}
#| label: tbl-data-quality6
#| tbl-cap: Studyid 6
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[6]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 1)
  )
```

```{r}
#| label: tbl-data-quality7
#| tbl-cap: Studyid 7
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[7]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 2)
  )
```

```{r}
#| label: tbl-data-quality8
#| tbl-cap: Studyid 8
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[8]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 4)
  )
```

```{r}
#| label: tbl-data-quality9
#| tbl-cap: Studyid 9
#| tbl-cap-location: top

foo %>%
  filter(studyid %in% foo_odd_dates_ids[9]) %>%
  select(studyid, timefr, vin_date, vin_loc) %>%
  gt::gt() %>% 
  gt::tab_style(
    style = list(
      gt::cell_fill(color = "yellow")
    ),
    locations = gt::cells_body(
      rows = 1)
  )
```
:::

## Patterns of interview type

These are the frequencies of the different pattern of interview type for the first four visits.

```{r}
#| label: tbl-interview-pattern
#| tbl-cap: Pattern of interview type for the first four visits
#| tbl-cap-location: top
sagesII_subject_df %>%
  select(studyid, timefr, vin_loc3) %>%
  pivot_wider(id_cols = studyid, names_from = timefr, names_prefix = "M", values_from = vin_loc3) %>%
  group_by(M0, M1, M2, M6) %>%
  count() %>%
  # arrange(desc(n)) %>%
  ungroup() %>%
  gt::gt()

```

# Sample characteristics

## @tbl-descriptives: Sample characteristics - SAGES II baseline

```{r}
#| label: tbl-descriptives
#| tbl-cap: Sample characteristics
#| tbl-cap-location: top


sagesII_subject_df_bl %>%
  select(vdfemale, vdnonwhite, vdeduc_r, vdsurg, vdgds15, vdcci_cat) %>%
  gtsummary::tbl_summary(
    statistic = list(gtsummary::all_continuous() ~ "{mean} ({sd})",
                     gtsummary::all_categorical() ~ "{n} / {N} ({p}%)")
  ) %>%
  gtsummary::add_n() %>%
  gtsummary::modify_caption("SAGES II - Baseline interview")

```

::: callout-note
This is the descriptive statistics for SAGES II at the baseline interview. In the harmonization analysis, for the telephone/video samples the interviews came (mostly) from the follow-up interviews.
:::

## @tbl-descriptives_split: Sample characteristics - SAGES II at first interview mode

```{r}
#| label: tbl-descriptives_split
#| tbl-cap: Sample characteristics by interview mode
#| tbl-cap-location: top

sagesII_subject_df %>%
  filter(visit_number_loc==1) %>%
  select(vin_loc3, timefr, visit_number_overall, vdfemale, vdnonwhite, vdeduc_r, vdsurg, vdgds15, vdcci_cat) %>%
  gtsummary::tbl_summary(by = vin_loc3,
    statistic = list(gtsummary::all_continuous() ~ "{mean} ({sd})",
                     gtsummary::all_categorical() ~ "{n} / {N} ({p}%)")
  )  %>%
  gtsummary::add_n() %>%
  gtsummary::modify_caption("SAGES II - First interview at different assessment modes")

```

::: callout-note
This table is somewhat tricky to interpret.  It includes the first time a participant had a particular interview mode. So a participant could have had an in-person interview, a telephone interview and video interview. That participant would be listed in all the columns.

The reason this table might be useful is that it describes the samples used to harmonize the GCP across interview types.

* Of the participants' first in-person interview, 76% had their first in-person interview at baseline.

* Of the participants' first telephone interview, 51% had their first telephone interview at 1-month and 24% had their first telephone interview at 6-month.

* Of the participants' first video interview, 55% had their first video interview at baseline, and 23% had their first video interview at 12-month.
:::

## @tbl-descriptives_validation: Sample characteristics - SAGES II validation sample

```{r}
#| label: tbl-descriptives_validation
#| tbl-cap: Sample characteristics for the validation sample
#| tbl-cap-location: top
sagesII_validation_df_ids <- sagesII_validation_df %>%
  pull(studyid)

sagesII_subject_df_bl %>%
  filter(studyid %in% sagesII_validation_df_ids) %>%
  select(vdfemale, vdnonwhite, vdeduc_r, vdsurg, vdgds15, vdcci_cat) %>%
  gtsummary::tbl_summary(
    statistic = list(gtsummary::all_continuous() ~ "{mean} ({sd})",
                     gtsummary::all_categorical() ~ "{n} / {N} ({p}%)")
  )  %>%
  gtsummary::add_n() %>%
  gtsummary::modify_caption("SAGES II - validation sample")
```

This table should be merged with whichever of @tbl-descriptives or @tbl-descriptives_split that gets used.


```{r}

gcp_study_nested <- readRDS(file=path(r_objects_folder, "400_gcp_study_nested_v2c.rds"))

sagesII_validation_df_npb <- gcp_study_nested %>%
  filter(study_name_short %in% c("SAGESII_Telephone_validation", "SAGESII_Video_validation")) %>%
  select(study_name_short, response_data_all) %>%
  unnest(cols = c(response_data_all))


sagesII_validation_df_npb  %>%
  mutate(Q871 = case_when(is.na(Q871) ~ Q971,
                          TRUE ~ Q871),
         Q872 = case_when(is.na(Q872) ~ Q972,
                          TRUE ~ Q872),
         Q826 = case_when(is.na(Q826) ~ Q926,
                          TRUE ~ Q826),
         Q828 = case_when(is.na(Q828) ~ Q928,
                          TRUE ~ Q828),
         Q866 = case_when(is.na(Q866) ~ Q966,
                          TRUE ~ Q866),
         Q885 = case_when(is.na(Q885) ~ Q985,
                          TRUE ~ Q885)
         ) %>%
  labelled::set_variable_labels(Q871 = "Digit Span Forwards", 
                                Q872 = "Digit Span Backwards", 
                                Q826 = "HVLT", 
                                Q828 = "HVLT - Delayed", 
                                Q866 = "Fluency - Supermarket", 
                                Q885 = "FAS") %>%
  select(study_name_short, Q871, Q872, Q826, Q828, Q866, Q885) %>%
  gtsummary::tbl_summary(by = study_name_short,
                         statistic = list(
                           gtsummary::all_continuous() ~ "{mean} ({sd})"
                           ),
                         type = c(Q871, Q872, Q826, Q828, Q866, Q885) ~ "continuous"
    ) %>%
  gtsummary::add_difference()

```


# Cognitive battery

## @tbl-battery: Cognitive tests by mode and study

As a result of a DIF analysis, we found that the digit span tests and hvlt were different between in-person and telephone interviews, and that digit span backwards was different between in-person and video interviews. So in the table below those tests will be listed twice indicating they are not linked in the harmonization process.

```{r}
#| label: tbl-battery
#| tbl-cap: "Cognitive tests by mode and study"
#| tbl-cap-location: top
 
gcp_items <- readRDS(file=path(r_objects_folder, "010_gcp_items.rds"))
gcp_linking_items <- readRDS(file=path(r_objects_folder, "010_gcp_linking_items.rds")) %>%
  select(item_a, item_b)

gcp_items <- gcp_items %>%
  filter(str_detect(item, "Q")) %>%
  filter(!str_detect(Set, "Not")) %>%
  filter(!str_detect(Set, "DNI")) %>%
  # filter(!str_detect(item, "Q7")) %>%
  left_join(gcp_linking_items, by = c("item" = "item_b")) %>%
  select(item, item_a, item_label, study, domain, Set)

gcp_items_wide <- gcp_items %>%
  mutate(item_new = case_when(!is.na(item_a) ~ item_a,
                              TRUE ~ item),
         x = "X") %>%
  select(item_new, study, x) %>%
  pivot_wider(names_from = study, values_from = x)

gcp_items <- gcp_items_wide %>%
  left_join(gcp_items, by = c("item_new" = "item")) %>%
  select(item_new, item_label, Set, domain, everything()) %>%
  select(-item_a, -study) %>%
  arrange(domain, item_new)

gcp_version <- "GCPv2c"
if (gcp_version == "GCPv1"){
  gcp_alt <- c("GCP-alt-1a", "GCP-alt-2a", "GCP-alt-3a")
}
if (gcp_version == "GCPv2a"){
  gcp_alt <- c("GCP-alt-1b", "GCP-alt-2a", "GCP-alt-3a")
}
if (gcp_version == "GCPv2b"){
  gcp_alt <- c("GCP-alt-1b", "GCP-alt-2b", "GCP-alt-3b")
}
if (gcp_version == "GCPv2c"){
  gcp_alt <- c("GCP-alt-1b", "GCP-alt-2c", "GCP-alt-3b")
}

gcp_items <- gcp_items %>%
  filter(Set %in% c("GCP", gcp_alt))

gcp_items %>%
  gt::gt() %>%
  gt::cols_hide(columns = c(item_new, domain, Set, SAGES_Telephone, INTUIT_ACTIVE, SAGESII_Telephone_validation, SAGESII_Video_validation)) %>%
  gt::cols_align(align = "center") %>%
  gt::tab_row_group(label = "Memory", rows = domain %in% c("mem")) %>%
  gt::tab_row_group(label = "Language", rows = domain %in% c("lan")) %>%
  gt::tab_row_group(label = "Attention/Executive Function", rows = domain %in% c("att", "ef")) %>%
  gt::sub_missing(columns = 3:11, rows = everything(), missing_text = "") %>%
  gt::tab_spanner("Study/Mode", 5:11)
  

```

@tbl-battery shows the neuropsych tests used in the different studies/modes.


```{r}
gcp_study_nested_v2c <- readRDS(file=path(r_objects_folder, "250_gcp_study_nested_GCPv2c.rds"))
foo <- gcp_study_nested_v2c %>%
  mutate(boo = map(h_obj, pluck, "response_df_filtered"))  %>%
  select(study_name_short, boo)  %>%
  unnest(cols = c(boo)) %>%
  select(-study_wave_number, -timefr) %>%
  filter(!(item %in% c("Q532")))

response_df_validation <- foo %>%
  filter(study_name_short %in% c("SAGESII_Telephone_validation", "SAGESII_Video_validation")) %>%
  select(study_name_short, newid, item, response)
response_df_validation_wide <- response_df_validation %>%
  pivot_wider(id_cols = c(newid, study_name_short), names_from = item, values_from = response) 


response_df_sages <- foo %>%
  filter(study_name_short %in% c("SAGESII_Inperson", "SAGESII_Telephone", "SAGESII_Video")) %>%
  select(study_name_short, newid, item, response)
response_df_sages_wide <- response_df_sages %>%
  pivot_wider(id_cols = c(newid, study_name_short), names_from = item, values_from = response) 

validation_df_differences <- response_df_validation_wide %>%
  mutate(id = str_sub(newid, 3, -1),
         x = str_sub(study_name_short, 9, 9)) %>%
  arrange(id) %>%
  ungroup() %>%
  select(-study_name_short) %>%
  group_by(id) %>%
  summarize(across(c(Q103, Q102, Q226, Q228, Q285, Q266), diff, .names = '{col}')) %>%
  mutate(study_name_short = "Difference")
  
goo <- response_df_validation_wide %>%
  bind_rows(validation_df_differences) %>%
  mutate(study_name_short = factor(study_name_short, levels = c("SAGESII_Telephone_validation", "SAGESII_Video_validation", "Difference")))

goo <- goo %>%
  labelled::set_variable_labels(Q103 = str_c("Q103: ", gcp_items %>% filter(item_new=="Q103") %>% pull(item_label)), 
                                Q102 = str_c("Q102: ", gcp_items %>% filter(item_new=="Q102") %>% pull(item_label)),
                                Q226 = str_c("Q226: ", gcp_items %>% filter(item_new=="Q226") %>% pull(item_label)), 
                                Q228 = str_c("Q228: ", gcp_items %>% filter(item_new=="Q228") %>% pull(item_label)), 
                                Q285 = str_c("Q285: ", gcp_items %>% filter(item_new=="Q285") %>% pull(item_label)), 
                                Q266 = str_c("Q266: ", gcp_items %>% filter(item_new=="Q266") %>% pull(item_label)), 
                                Q534 = str_c("Q534: ", gcp_items %>% filter(item_new=="Q534") %>% pull(item_label)), 
                                Q587 = str_c("Q587: ", gcp_items %>% filter(item_new=="Q587") %>% pull(item_label)), 
                                Q115 = str_c("Q115: ", gcp_items %>% filter(item_new=="Q115") %>% pull(item_label)), 
                                Q101 = str_c("Q101: ", gcp_items %>% filter(item_new=="Q101") %>% pull(item_label)), 
                                Q100 = str_c("Q100: ", gcp_items %>% filter(item_new=="Q100") %>% pull(item_label)), 
                                Q225 = str_c("Q225: ", gcp_items %>% filter(item_new=="Q225") %>% pull(item_label)), 
                                Q242 = str_c("Q242: ", gcp_items %>% filter(item_new=="Q242") %>% pull(item_label)), 
  )

response_df_sages_wide <- response_df_sages_wide %>%
  labelled::set_variable_labels(Q103 = str_c("Q103: ", gcp_items %>% filter(item_new=="Q103") %>% pull(item_label)), 
                                Q102 = str_c("Q102: ", gcp_items %>% filter(item_new=="Q102") %>% pull(item_label)),
                                Q226 = str_c("Q226: ", gcp_items %>% filter(item_new=="Q226") %>% pull(item_label)), 
                                Q228 = str_c("Q228: ", gcp_items %>% filter(item_new=="Q228") %>% pull(item_label)), 
                                Q285 = str_c("Q285: ", gcp_items %>% filter(item_new=="Q285") %>% pull(item_label)), 
                                Q266 = str_c("Q266: ", gcp_items %>% filter(item_new=="Q266") %>% pull(item_label)), 
                                Q534 = str_c("Q534: ", gcp_items %>% filter(item_new=="Q534") %>% pull(item_label)), 
                                Q587 = str_c("Q587: ", gcp_items %>% filter(item_new=="Q587") %>% pull(item_label)), 
                                Q115 = str_c("Q115: ", gcp_items %>% filter(item_new=="Q115") %>% pull(item_label)), 
                                Q101 = str_c("Q101: ", gcp_items %>% filter(item_new=="Q101") %>% pull(item_label)), 
                                Q100 = str_c("Q100: ", gcp_items %>% filter(item_new=="Q100") %>% pull(item_label)), 
                                Q225 = str_c("Q225: ", gcp_items %>% filter(item_new=="Q225") %>% pull(item_label)), 
                                Q242 = str_c("Q242: ", gcp_items %>% filter(item_new=="Q242") %>% pull(item_label)), 
                                Q526 = str_c("Q526: ", gcp_items %>% filter(item_new=="Q526") %>% pull(item_label)), 
                                Q571 = str_c("Q571: ", gcp_items %>% filter(item_new=="Q571") %>% pull(item_label)), 
                                Q572 = str_c("Q572: ", gcp_items %>% filter(item_new=="Q572") %>% pull(item_label)), 
                                Q672 = str_c("Q672: ", gcp_items %>% filter(item_new=="Q672") %>% pull(item_label)), 
  )
```

```{r}
#| label: tbl-cog-desc
#| tbl-cap: "Descriptive statistics of cognitive battery"
#| tbl-cap-location: top
response_df_sages_wide %>%
  select(-newid) %>%
  gtsummary::tbl_summary(by = study_name_short,
                         statistic = list(gtsummary::all_continuous() ~ "{mean} ({sd})",
                                          gtsummary::all_categorical() ~ "{n} / {N} ({p}%)"
                                          ),
                         type = c(Q103, Q102, Q226, Q228, Q285, 
                                  Q266, Q534, Q587, Q115, 
                                  Q101, Q100, Q225, Q242,
                                  Q526, Q571, Q572, Q672
                                  ) ~ "continuous"
    ) %>%
  gtsummary::as_gt() %>%
  gt::tab_row_group(label = "Memory", rows = variable %in% c("Q226", "Q228")) %>%
  gt::tab_row_group(label = "Language", rows = variable %in% c("Q115", "Q266", "Q285", "Q587", "Q526")) %>%
  gt::tab_row_group(label = "Attention/Executive Function", rows = variable %in% c("Q101", "Q100", "Q102", "Q103", "Q225", "Q242", "Q534", "Q571", "Q572", "Q672")) 
```

@tbl-cog-desc shows descriptive statistics of the cognitive battery by the different modes.

```{r}
#| label: tbl-cog-desc-validation
#| tbl-cap: "Descriptive statistics of cognitive battery in validation sample"
#| tbl-cap-location: top

goo %>%
  select(-newid, -id) %>%
  gtsummary::tbl_summary(by = study_name_short,
                         statistic = list(gtsummary::all_continuous() ~ "{mean} ({sd})",
                                          gtsummary::all_categorical() ~ "{n} / {N} ({p}%)"
                                          ),
                         type = c(Q103, Q102, Q226, Q228, Q285, 
                                  Q266, Q534, Q587, Q115, 
                                  Q101, Q100, Q225, Q242) ~ "continuous"
    ) %>%
  gtsummary::as_gt() %>%
  gt::tab_row_group(label = "Memory", rows = variable %in% c("Q226", "Q228")) %>%
  gt::tab_row_group(label = "Language", rows = variable %in% c("Q115", "Q266", "Q285", "Q587")) %>%
  gt::tab_row_group(label = "Attention/Executive Function", rows = variable %in% c("Q101", "Q100", "Q102", "Q103", "Q225", "Q242", "Q534")) 

```

@tbl-cog-desc-validation shows descriptive statistics of the cognitive battery in the validation sample.

# GCP Information

## @fig-info: Test Information by mode and study

```{r}
#| label: fig-info
#| fig-cap: "Test Information by mode and study"
#| fig-cap-location: top
gcp_study_nested_v2c <- readRDS(file=path(r_objects_folder, "250_gcp_study_nested_GCPv2c.rds"))

foo <- gcp_study_nested_v2c[["h_obj"]]

foo <- gcp_study_nested_v2c %>%
  mutate(boo = map(h_obj, pluck, "test_info"))

goo <- foo %>%
  select(study_name_short, boo) %>%
  unnest(cols = c(boo)) %>%
  mutate(t = (theta*10)+50)

hoo <- goo %>%
  filter(study_name_short %in% c("SAGES", 
                                 "SAGESII_Inperson", "SAGESII_Telephone", 
                                 "SAGESII_Video")) %>%
  mutate(i = case_when(study_name_short=="SAGES" ~ i + .1,
                       study_name_short=="SAGESII_Video" ~ i - .1,
                       TRUE ~ i)) 

hoo %>%
ggplot(aes(x = t, y = i, color = study_name_short)) +
  geom_line() +
  scale_y_continuous("Information") +
  scale_x_continuous("GCP", breaks = seq(10, 90, 10)) +
  scale_color_discrete("Study", labels = c("SAGES (n = 560)", 
                                 "SAGES II Inperson (n = 1220)", "SAGES II Telephone (n = 426)", 
                                 "SAGES II Video (n = 362)")) +
  hrbrthemes::theme_ipsum()

ggsave(here::here("Figures", "Figure 2.pdf"), device = cairo_pdf)
```

```{r}
#| label: fig-info-rug
#| fig-cap: "Test Information by mode and study"
#| fig-cap-location: top
gcp_g_v2c <- readRDS(file=path(r_objects_folder, "400_gcp_g_v2c.rds"))
sages_gcp <- gcp_g_v2c %>%
  filter(study_name_short %in% c("SAGESII_Inperson", "SAGESII_Telephone", "SAGESII_Video"))

hoo %>%
ggplot(aes(x = t, y = i, color = study_name_short)) +
  geom_line() +
  scale_y_continuous("Information") +
  scale_x_continuous("GCP", breaks = seq(10, 90, 10)) +
  scale_color_discrete("Study", labels = c("SAGES", 
                                 "SAGES II Inperson", "SAGES II Telephone", 
                                 "SAGES II Video")) +
  hrbrthemes::theme_ipsum() +
  geom_rug(data = sages_gcp, inherit.aes = FALSE, mapping = aes(x = gcp), alpha = .4)
ggsave(here::here("Figures", "Figure 2 w rug.pdf"), device = cairo_pdf)
```

@fig-info and @fig-info-rug shows the information plot.

::: callout-note
The cognitive test battery was the same for SAGES I - In-person, SAGES II - In-person, and SAGES II - Video. This means their Information curves would overlap. I shifted the curves by a small amount so they would be distinct.
:::

# Validation


## @fig-video-vs-telephone: Agreement by mode

```{r}
gcp_g_v2c <- readRDS(file=path(r_objects_folder, "400_gcp_g_v2c.rds"))
validation_df <- gcp_g_v2c %>%
  filter(study_wave_number %in% c(8,9)) %>%
  mutate(id = substr(newid, 3, 9)) %>%
  select(id, gcp, interview_mode) %>%
  pivot_wider(id_cols = id, names_from = interview_mode, values_from = gcp)

validation_wide <- validation_df %>%
  mutate(d = Telephone -Video,
         dev2 = (d - mean(d))^2,
         avg = (Telephone + Video)/2)

validation_differences_mean <- mean(validation_wide$d)
validation_loa <- mean(validation_wide$d) + qt(c(.025, .975), df=(nrow(validation_wide)-1))*sqrt(sum(validation_wide$dev2)/(nrow(validation_wide)-1))


```

```{r}
# library(MethComp)







```


```{r}
#| label: fig-video-vs-telephone
#| fig-cap: "Scatterplot of Telephone vs Video GCP in validation sample"
#| fig-cap-location: top

ggplot(validation_df, aes(x=Telephone, y=Video)) +
  geom_point() +
  scale_x_continuous("Telephone GCP", limits = c(40, 90)) +
  scale_y_continuous("Video GCP", limits = c(40, 90)) +
  # geom_smooth(se=FALSE, aes(color = "Loess")) +
  geom_abline(slope = 1) +
  # geom_abline(aes(slope = deming_reg@para[2], intercept = deming_reg@para[1], 
              # color = "Deming")) +
  # scale_color_manual("Model", values = c("blue", "red"), breaks = c("Loess", "Deming")) +
  hrbrthemes::theme_ipsum()
ggsave(here::here("Figures", "Figure 3.pdf"), device = cairo_pdf)
```

The correlation of GCP between telephone and video interviews is: `r cor(validation_df$Telephone, validation_df$Video) %>% round(2)`.

```{r}
#| label: fig-bland-altman
#| fig-cap: "Bland-Altman plot of Telephone vs Video GCP in validation sample"
#| fig-cap-location: top

validation_wide %>%
  ggplot(aes(x = avg, y = d)) +
    geom_point() +
    scale_y_continuous("Telephone - Video", limits = c(-20, 20)) +
    scale_x_continuous("(Telephone + Video)/2", limits = c(45, 85)) +
    hrbrthemes::theme_ipsum() +
    geom_hline(yintercept = 0, color = "black", alpha = .75) +
    geom_hline(yintercept = validation_differences_mean, color = "blue", size=1.1) +
    geom_hline(yintercept = validation_loa, color = "blue", linetype = "dashed", size=.9) 
    

ggsave(here::here("Figures", "Figure 4.pdf"), device = cairo_pdf)
```


The limits of agreement of the difference between mode of assessment is `r round(validation_loa, 2)`.

## (Table 3): Validation study results

## @fig-gcp-boxplots: GCP by study

```{r}
#| label: fig-gcp-boxplots
#| fig-cap: GCP by study/mode
#| fig-cap-location: top
gcp_g_v2c %>%
  mutate(study_name_short = factor(study_name_short, 
                                   levels = c("HRS_ADAMS", "SAGES", "SAGESII_Inperson",
                                              "SAGESII_Telephone", "SAGESII_Video",
                                              "SAGESII_Telephone_validation",
                                              "SAGESII_Video_validation", 
                                              "SAGES_Telephone", "INTUIT_ACTIVE"),
                                   labels = c("ADAMS (Unweighted)", "SAGES", "SAGESII - Inperson",
                                              "SAGESII - Telephone", "SAGESII - Video",
                                              "SAGESII - Telephone (validation)", 
                                              "SAGESII - Video (validation)", 
                                              "SAGES - Telephone", "INTUIT/ACTIVE"))) %>%
  filter(!study_wave_number %in% c(7, 6)) %>%
  ggplot(aes(x = gcp, y = study_name_short)) +
  geom_violin() +
  geom_boxplot(width = .25) +
  scale_y_discrete("Study/Mode") +
  scale_x_continuous("GCP") +
  hrbrthemes::theme_ipsum() +
  labs(caption = "Uses all interviews for SAGES & SAGESII modes")


```

```{r}
#| eval: false
gcp_g_v2c %>%
  filter(study_wave_number %in% c(3, 4, 5)) %>%
  arrange(newid, timefr) %>%
  ggplot(aes(x=timefr, y = gcp, color = study_name_short, group = newid)) +
    geom_point() +
    geom_line()
```


::: {.callout-note collapse="true"}
## Expand to see the R session information

```{r} 
sessionInfo()
```
:::
